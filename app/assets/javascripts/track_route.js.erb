$( document ).ready(function() {

  $("#gpx-upload").on("change", function(){
    var xml = $(this)[0].files[0]

    var reader = new FileReader()

    reader.onload = function(e) {
      try {
        var gpxDoc = $($.parseXML(reader.result));
        readGpxPoints(gpxDoc);
      } catch (err) {
        $("#processing-overlay").hide();
        alert("Uh oh. Looks like there's something wrong with the GPX file...\n\n" + err);
      }
    };


    reader.readAsText(xml)
    // $(xml).find("trkpt").each(function () {
    //    var lat = $(this).attr("lat");
    //    var lon = $(this).attr("lon");
    //    var p = new google.maps.LatLng(lat, lon);
    //    points.push(p);
    //    bounds.extend(p);
    // });
  })

  $('#submit-map-button').prop('disabled', true);

  function readGpxPoints(gpxDoc) {
    var array_of_lat_lng = []
    var array = []
    $("gpx:root>trk>trkseg", gpxDoc).each(function(i, e) {
      $(e).children("trkpt").each(function(i, e) {
        var lat = parseFloat($(e).attr("lat"));
        var lon = parseFloat($(e).attr("lon"));
        var ll = new google.maps.LatLng(lat, lon)
        array_of_lat_lng.push(ll)
      })
    })
    drawPolyLine(array_of_lat_lng, "gps")
  }

  function initMapTrack() {
    // setting as global scope which might be bad
    getLocation(function(pos) {
      var uluru = pos;
      map = new google.maps.Map(document.getElementById('map-track-route'), {
        zoom: 11,
        center: uluru
      });

      $("#track-route").on("click", function(){
        var pleaseWait = $('#pleaseWaitDialog');
        pleaseWait.modal({
          backdrop: 'static',
          keyboard: false
        });
        pleaseWait.modal('show');
        var array_of_arrays = []
        var array = []
        var trackRoute = setInterval(function() {
          getLocation(function(pos){
            array.push(pos)
          })
        }, 1 * 1000); // 60 * 1000 milsec
        $("#stop-track-route").on("click", function(){
          pleaseWait.modal('hide');
          clearInterval(trackRoute);
          drawPolyLine(array)
        })
      })
    })
  }

  function getRoadsPoints(array_of_arrays) {
    var hash = { snappedPoints: [] }
    var count = 0
    for (var i = 0; i < array_of_arrays.length; i++) {
      $.get('https://roads.googleapis.com/v1/snapToRoads', {
        interpolate: true,
        key: "<%= ENV['GOOGLE_MAPS_API'] %>",
        path: array_of_arrays[i].join('|')
      }, function(data) {
        count++;
        hash.snappedPoints = hash.snappedPoints.concat(data.snappedPoints)
        if (count === array_of_arrays.length) {
          drawPolyLine(hash);
        }
      });
    }
    // this is getting run before loop is finished cause it's an async call but shouldn't do that
  }

  function drawPolyLine(array, gps) {
    var snappedCoordinates = [];
    gps = typeof gps !== 'undefined' ? gps : false;
    if (!(gps)) {
      for (var i = 0; i < array.length; i++) {
        var latlng = new google.maps.LatLng(
            array[i].lat,
            array[i].lng);
        snappedCoordinates.push(latlng);
      }
    } else {
      snappedCoordinates = array
    }
    var path = new google.maps.Polyline({
      path: snappedCoordinates,
      geodesic: true,
      strokeColor: '#FF0000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });

    path.setMap(map)
    savePolyLineString(google.maps.geometry.encoding.encodePath(snappedCoordinates), google.maps.geometry.spherical.computeLength(path.getPath().getArray()))
    var array_mid_value = snappedCoordinates[parseInt(snappedCoordinates.length/2)]
    newLocation(array_mid_value.lat(), array_mid_value.lng())
  }

  function savePolyLineString(string, distance) {
    $("#post_poly_line").val(string)
    $("#distance").val(distance)
  }

  function newLocation(newLat,newLng) {
    map.setCenter({
      lat : newLat,
      lng : newLng
    });
    map.setZoom(11)
    $('#submit-map-button').css({
      cursor: "inherit",
      opacity: "1"
    })
    $('#submit-map-button').prop('disabled', false);
  }

  function getLocation(callback) {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        callback(pos);
      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
  }

  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    alert("Some stuff went wrong")
  }

  initMapTrack()

})
